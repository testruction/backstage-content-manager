apiVersion: integrations.backstage.io/v1alpha1
kind: Plugin
metadata:
  name: testruction.io
spec:
  plugins:
    - name: Home
      doc: https://github.com/backstage/backstage/tree/master/plugins/home/README.md
      app:
        package: "@backstage/plugin-home"
        src:
          appTsx:
            import: |-
              import { HomepageCompositionRoot } from '@backstage/plugin-home';
              import { homePage } from './components/home/HomePage';
            flatRoutes: |-
              <Route path="/" element={<HomepageCompositionRoot />}>
                {homePage}
              </Route>;

    - name: Announcements
      doc: https://github.com/K-Phoen/backstage-plugin-announcements/blob/main/docs/setup.md
      backend:
        package: "@k-phoen/backstage-plugin-announcements-backend"
        scripts:
          - type: inline
            script: |
              import { buildAnnouncementsContext, createRouter } from '@k-phoen/backstage-plugin-announcements-backend';
              import { Router } from 'express';
              import { PluginEnvironment } from '../types';

              export default async function createPlugin({
                logger,
                database,
                permissions,
              }: PluginEnvironment): Promise<Router> {
                const announcementsContext = await buildAnnouncementsContext({
                  logger: logger,
                  database: database,
                  permissions: permissions
                });

                return await createRouter(announcementsContext);
              }
            destination: packages/backend/src/plugins/announcements.ts
        src:
          indexTs:
            import: import announcements from './plugins/announcements';
            useHotMemoize: const announcementsEnv = useHotMemoize(module, () => createEnv('announcements'));
            apiRouter: apiRouter.use('/announcements', await announcements(announcementsEnv));
          plugins:
            searchTs:
              import: import { AnnouncementCollatorFactory } from '@k-phoen/backstage-plugin-announcements-backend';
              # createPlugin: |-
              #   export default async function createPlugin({
              #     logger,
              #     permissions,
              #     discovery,
              #     config,
              #     tokenManager,
              #   }: PluginEnvironment) {
              #     // Initialize a connection to a search engine.
              #     const searchEngine = await ElasticSearchSearchEngine.fromConfig({
              #       logger,
              #       config,
              #     });
              #     const indexBuilder = new IndexBuilder({ logger, searchEngine });
              schedule: |
                const tenMinutesSchedule = env.scheduler.createScheduledTaskRunner({
                  frequency: Duration.fromObject({ minutes: 10 }),
                  timeout: Duration.fromObject({ minutes: 15 }),
                  // A 3 second delay gives the backend server a chance to initialize before
                  // any collators are executed, which may attempt requests against the API.
                  initialDelay: Duration.fromObject({ seconds: 3 }),
                });
              indexBuilder: |
                // collator gathers entities from announcements.
                  indexBuilder.addCollator({
                    schedule: tenMinutesSchedule,
                    factory: AnnouncementCollatorFactory.fromConfig({
                      logger: env.logger,
                      discoveryApi: env.discovery,
                    }),
                  });
      app:
        package: "@k-phoen/backstage-plugin-announcements"
        src:
          appTsx:
            import: import { AnnouncementsPage } from '@k-phoen/backstage-plugin-announcements';
            flatRoutes: <Route path="/announcements" element={<AnnouncementsPage />} />
          components:
            catalog:
              entityPageTsx:
                import: import { EntityAdrContent, isAdrAvailable } from '@backstage/plugin-adr';
                serviceEntityPage: |
                  <EntityLayout.Route if={isAdrAvailable} path="/adrs" title="ADRs">
                    <EntityAdrContent />
                  </EntityLayout.Route>
            search:
              searchPageTsx:
                import: |-
                  import { AnnouncementSearchResultListItem } from '@k-phoen/backstage-plugin-announcements';
                  import RecordVoiceOverIcon from '@material-ui/icons/RecordVoiceOver';
                searchType: |-
                  {
                    value: 'announcements',
                    name: 'Announcements',
                    icon: <RecordVoiceOverIcon />,
                  },
                searchResult: >-
                  <AdrSearchResultListItem icon={<DocsIcon />} />
            home:
              homePageTsx:
                homePage: |
                  <Page themeId="home">
                    <Header title="AnnouncementsCard" />

                    <Content>
                      <Grid container>
                        <Grid item md={6}>
                          <AnnouncementsCard max={3} />
                        </Grid>
                      </Grid>
                    </Content>
                  </Page>

    - name: Architecture Decision Records
      doc: https://github.com/backstage/backstage/tree/v1.18.3/plugins/adr-backend
      backend:
        package: "@backstage/plugin-adr-backend"
        scripts:
          - type: remote
            url: https://github.com/backstage/backstage/blob/v1.18.3/packages/backend/src/plugins/adr.ts
            destination: packages/backend/src/plugins/adr.ts
        src:
          indexTs:
            import: import adr from './plugins/adr';
            useHotMemoize: const adrEnv = useHotMemoize(module, () => createEnv('adr'));
            apiRouter: apiRouter.use('/adr', await adr(adrEnv));
          plugins:
            searchTs:
              import: import { DefaultAdrCollatorFactory } from '@backstage/plugin-adr-backend';
              indexBuilder: |
                // collator gathers entities from adr.
                indexBuilder.addCollator({
                  schedule,
                  factory: DefaultAdrCollatorFactory.fromConfig({
                    cache: env.cache,
                    config: env.config,
                    discovery: env.discovery,
                    logger: env.logger,
                    reader: env.reader,
                    tokenManager: env.tokenManager,
                  }),
                });
      app:
        package: "@backstage/plugin-adr"
        src:
          components:
            catalog:
              entityPageTsx:
                import: import { EntityAdrContent, isAdrAvailable } from '@backstage/plugin-adr';
                serviceEntityPage: |
                  <EntityLayout.Route if={isAdrAvailable} path="/adrs" title="ADRs">
                    <EntityAdrContent />
                  </EntityLayout.Route>
            search:
              searchPageTsx:
                import: |-
                  import { AdrSearchResultListItem } from '@backstage/plugin-adr';
                  import { AdrDocument } from '@backstage/plugin-adr-common';
                searchType: |-
                  {
                    value: 'adr',
                    name: 'Architecture Decision Records',
                    icon: <DocsIcon />,
                  },
                # searchResult: |
                #   {({ results }) => (
                #       <List>
                #         {results.map(({ type, document, highlight, rank }) => {
                #           switch (type) {
                #             // ...
                #             case 'adr':
                #               return (
                #                 <AdrSearchResultListItem
                #                   key={document.location}
                #                   // Not required if you're leveraging the new search results extensions available in v1.11+
                #                   // https://backstage.io/docs/features/search/how-to-guides#2-using-an-extension-in-your-backstage-app
                #                   result={document as AdrDocument}
                #                 />
                #               );
                #             // ...
                #           }
                #         })}
                #       </List>
                #     )}
                searchResult: >-
                  <AdrSearchResultListItem icon={<DocsIcon />} />

    - name: Badges
      doc: https://github.com/backstage/backstage/blob/master/plugins/badges/README.md
      backend:
        package: "@backstage/plugin-badges-backend"
        scripts:
          - type: remote
            url: https://github.com/backstage/backstage/blob/v1.18.3/packages/backend/src/plugins/badges.ts
            destination: packages/backend/src/plugins/badges.ts
        src:
          indexTs:
            import: import badges from './plugins/badges';
            useHotMemoize: const badgesEnv = useHotMemoize(module, () => createEnv('badges'));
            apiRouter: apiRouter.use('/badges', await badges(badgesEnv));
      app:
        package: "@backstage/plugin-badges-backend"
        src:
          appTsx:
            import: import { badgesPlugin } from '@backstage/plugin-badges';
            createApp:
              plugin: badgesPlugin,
          components:
            catalog:
              entityPageTsx:
                import: >-
                  import { EntityBadgesDialog } from '@backstage/plugin-badges';
                  import BadgeIcon from '@material-ui/icons/CallToAction';
                  import React, { ReactNode, useMemo, useState } from 'react';
                serviceEntityPage: |
                  <EntityLayout.Route if={isAdrAvailable} path="/adrs" title="ADRs">
                    <EntityAdrContent />
                  </EntityLayout.Route>

    - name: Catalog Backend Module for GitHub
      doc: https://github.com/backstage/backstage/tree/master/plugins/catalog-backend-module-github/README.md
      backend:
        package: "@backstage/plugin-catalog-backend-module-github"
        src:
          plugins:
            catalogTs:
              import: import { GithubEntityProvider } from '@backstage/plugin-catalog-backend-module-github';
                createPlugin: |-
                  builder.addEntityProvider(
                    GithubEntityProvider.fromConfig(env.config, {
                      logger: env.logger,
                      // optional: alternatively, use scheduler with schedule defined in app-config.yaml
                      schedule: env.scheduler.createScheduledTaskRunner({
                        frequency: { minutes: 30 },
                        timeout: { minutes: 3 },
                      }),
                      // optional: alternatively, use schedule
                      scheduler: env.scheduler,
                    }),
                  );

    - name: DevTools (secure)
      doc: https://github.com/backstage/backstage/blob/master/plugins/devtools/README.md
      backend:
        package: "@backstage/plugin-devtools-backend"
        scripts:
          - type: remote
            url: https://github.com/backstage/backstage/raw/v1.18.3/packages/backend/src/plugins/devtools.ts
            destination: packages/backend/src/plugins/devtools.ts
        src:
          indexTs:
            import: import devTools from './plugins/devtools';
            useHotMemoize: const devToolsEnv = useHotMemoize(module, () => createEnv('devtools'));
            apiRouter: apiRouter.use('/devtools', await devTools(devToolsEnv));
      app:
        package: >-
          @backstage/plugin-devtools
          @backstage/plugin-devtools-common
        src:
          appTsx:
            import: |-
              import { DevToolsPage } from '@backstage/plugin-devtools';
              import { customDevToolsPage } from './components/devtools/CustomDevToolsPage';
              import { devToolsAdministerPermission } from '@backstage/plugin-devtools-common';
            flatRoutes: |-
              <Route path="/devtools"
                element={
                <RequirePermission permission={devToolsAdministerPermission}>
                  <DevToolsPage />
                </RequirePermission>
                }
              >
                {customDevToolsPage}
              </Route>
          components:
            catalog:
              entityPageTsx:
                import:  |-
                  import { EntityBadgesDialog } from '@backstage/plugin-badges';
                  import BadgeIcon from '@material-ui/icons/CallToAction';
                  import React, { ReactNode, useMemo, useState } from 'react';
                serviceEntityPage: |
                  <EntityLayout.Route if={isAdrAvailable} path="/adrs" title="ADRs">
                    <EntityAdrContent />
                  </EntityLayout.Route>
            root:
              rootTsx:
                import: |-
                  import BuildIcon from '@material-ui/icons/Build';
                  import { devToolsAdministerPermission } from '@backstage/plugin-devtools-common';
                  import { RequirePermission } from '@backstage/plugin-permission-react';
                sidebarSettings: |-
                  <RequirePermission
                    permission={devToolsAdministerPermission}
                    errorPage={<></>}>
                    <SidebarItem icon={BuildIcon} to="devtools" text="DevTools" />
                  </RequirePermission>
            devtools:
              customDevToolsPageTsx:
                import: import { UnprocessedEntitiesContent } from '@backstage/plugin-catalog-unprocessed-entities';
                devToolsLayout: |
                  <DevToolsLayout.Route path="unprocessed-entities" title="Unprocessed Entities">
                    <UnprocessedEntitiesContent />
                  </DevToolsLayout.Route>

    - name: Catalog Unprocessed Entities
      doc: https://github.com/backstage/backstage/tree/master/plugins/catalog-unprocessed-entities/README.md
      app:
        package: "@backstage/plugin-catalog-unprocessed-entities"
        src:
          appTsx:
            import: import { CatalogUnprocessedEntitiesPage } from '@backstage/plugin-catalog-unprocessed-entities';
            flatRoutes: |-
              <Route
                path="/catalog-unprocessed-entities"
                element={<CatalogUnprocessedEntitiesPage />}
              />;

    - name: Entity Feedback
      doc: https://github.com/backstage/backstage/tree/master/plugins/entity-feedback/README.md
      backend:
        package: "@backstage/plugin-entity-feedback-backend"
        scripts:
          - type: remote
            url: https://github.com/backstage/backstage/blob/v1.18.3/packages/backend/src/plugins/adr.ts
            destination: packages/backend/src/plugins/entityFeedback.ts
        src:
          indexTs:
            import: import entityFeedback from './plugins/entityFeedback';
            useHotMemoize: const entityFeedbackEnv = useHotMemoize(module, () => createEnv('entityFeedback'));
            apiRouter: apiRouter.use('/entity-feedback', await entityFeedback(entityFeedbackEnv));
      app:
        package: "@backstage/plugin-entity-feedback"
        src:
          components:
            catalog:
              entityPageTsx:
                coreComponents: InfoCard,
                import: |-
                  import {
                    EntityFeedbackResponseContent,
                    EntityLikeDislikeRatingsCard,
                    LikeDislikeButtons,
                  } from '@backstage/plugin-entity-feedback';
                overviewContent: |
                  <Grid item md={2}>
                    <InfoCard title="Rate this entity">
                      <LikeDislikeButtons />
                    </InfoCard>
                  </Grid>
                serviceEntityPage: |
                  <EntityLayout.Route path="/feedback" title="Feedback">
                    <EntityFeedbackResponseContent />
                  </EntityLayout.Route>
                userPage:
                  <Grid item xs={12}>
                    <EntityLikeDislikeRatingsCard />
                  </Grid>
                groupPage:
                  <Grid item xs={12}>
                    <EntityLikeDislikeRatingsCard />
                  </Grid>

    - name: Todo
      doc: https://github.com/backstage/backstage/tree/master/plugins/todo
      backend:
        package: "@backstage/plugin-todo-backend"
        scripts:
          - type: remote
            url: https://github.com/backstage/backstage/blob/v1.18.3/packages/backend/src/plugins/todo.ts
            destination: packages/backend/src/plugins/todo.ts
        src:
          indexTs:
            import: import todo from './plugins/todo';
            useHotMemoize: const todoEnv = useHotMemoize(module, () => createEnv('todo'));
            apiRouter: apiRouter.use('/todo', await todo(todoEnv));
      app:
        package: "@backstage/plugin-todo"
        src:
          components:
            catalog:
              entityPageTsx:
                import: import { EntityTodoContent } from '@backstage/plugin-todo';
                serviceEntityPage: |
                  <EntityLayout.Route path="/todo" title="Todo">
                    <EntityTodoContent />
                  </EntityLayout.Route>

    - name: Q&A
      doc: https://github.com/drodil/backstage-plugin-qeta/blob/main/docs/setup.md
      backend:
        package: "@drodil/backstage-plugin-qeta-backend"
        scripts:
          - type: inline
            script: |
              import {
                createRouter,
                DatabaseQetaStore,
              } from '@drodil/backstage-plugin-qeta-backend';
              import { PluginEnvironment } from '../types';

              export default async function createPlugin({
                logger,
                database,
                identity,
                config,
              }: PluginEnvironment) {
                const db = await DatabaseQetaStore.create({
                  database: database,
                });
                return createRouter({
                  logger,
                  database: db,
                  identity,
                  config,
                });
              }
            destination: packages/backend/src/plugins/qeta.ts
        src:
          indexTs:
            import: import qeta from './plugins/qeta';
            useHotMemoize: const qetaEnv = useHotMemoize(module, () => createEnv('qeta'));
            apiRouter: apiRouter.use('/qeta', await qeta(qetaEnv));
      app:
        package: "@drodil/backstage-plugin-qeta"
        src:
          appTsx:
            import: import { QetaPage } from '@drodil/backstage-plugin-qeta';
            flatRoutes: >-
              <Route path="/qeta" element={<QetaPage title="Questions" />} />
          components:
            root:
              rootTsx:
                import: import LiveHelpIcon from '@material-ui/icons/LiveHelp';
                sidebarPage: >-
                  <SidebarItem icon={LiveHelpIcon} to="qeta" text="Q&A" />

    - name: Entity Validation
      doc: https://github.com/backstage/backstage/tree/master/plugins/entity-validation/README.md
      app:
        package: "@backstage/plugin-entity-validation"
        src:
          appTsx:
            import: import { EntityValidationPage } from '@backstage/plugin-entity-validation';
            flatRoutes: >-
              <Route path="/entity-validation" element={<EntityValidationPage />} />
          components:
            root:
              rootTsx:
                import: import LiveHelpIcon from '@material-ui/icons/LiveHelp';
                globalNavSidebarGroup: >-
                  <SidebarItem icon={BuildIcon} to="entity-validation" text="Validator" />

    - name: GitHub Pull Requests Board
      doc: https://github.com/backstage/backstage/tree/master/plugins/github-pull-requests-board/README.md
      app:
        package: "@backstage/plugin-github-pull-requests-board"
        src:
          components:
            catalog:
              entityPageTsx:
                import: >-
                  import { EntityTeamPullRequestsCard } from '@backstage/plugin-github-pull-requests-board';
                groupPage: |
                  <Grid item xs={12}>
                    <EntityTeamPullRequestsCard />
                  </Grid>

    - name: GitHub Pull Requests
      doc: https://roadie.io/backstage/plugins/github-pull-requests
      app:
        package: "@roadiehq/backstage-plugin-github-pull-requests"
        src:
          components:
            catalog:
              entityPageTsx:
                import: >-
                  import { EntityGithubPullRequestsContent } from '@roadiehq/backstage-plugin-github-pull-requests';
                serviceEntityPage: |-
                  <EntityLayout.Route path="/pull-requests" title="Pull Requests">
                    <EntityGithubPullRequestsContent />
                  </EntityLayout.Route>
                overviewContent: |-
                  <Grid item md={6}>
                    <EntityGithubPullRequestsOverviewCard />
                  </Grid>
